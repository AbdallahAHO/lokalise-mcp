name: CI - Semantic Release

# This workflow is triggered on every push to the main branch
# It publishes to npm and creates GitHub releases with DXT artifacts
on:
    push:
        branches: [main]

jobs:
    release:
        name: Semantic Release
        runs-on: ubuntu-latest
        environment: release
        permissions:
            contents: write
            issues: write
            pull-requests: write

        steps:
            # Step 1: Check out the full Git history
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  token: ${{ secrets.GITHUB_TOKEN }}

            # Step 2: Setup Node.js environment
            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 22
                  cache: 'npm'

            # Step 3: Install dependencies
            - name: Install dependencies
              run: |
                  npm ci
                  npm install -g @anthropic-ai/dxt

            # Step 4: Build the package
            - name: Build
              run: |
                  npm run build
                  chmod +x dist/index.js

            # Step 5: Run tests
            - name: Run tests
              run: npm test

            # Step 6: Configure Git identity
            - name: Configure Git User
              run: |
                  git config --global user.email "github-actions[bot]@users.noreply.github.com"
                  git config --global user.name "github-actions[bot]"

            # Step 7: Get version from package.json
            - name: Get version
              id: get-version
              run: |
                  VERSION=$(node -p "require('./package.json').version")
                  echo "version=$VERSION" >> $GITHUB_OUTPUT
                  echo "Current version: $VERSION"

            # Step 8: Create and sign DXT package
            - name: Create DXT Package
              id: create-dxt
              env:
                  SIGNING_CERT: ${{ secrets.SIGNING_CERT }}
                  SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
              run: |
                  # Prepare release directory
                  node scripts/prepare-release.js ${{ steps.get-version.outputs.version }}

                  # Sign DXT package
                  DXT_FILE="release/lokalise-mcp-${{ steps.get-version.outputs.version }}.dxt"

                  if [ -n "${SIGNING_CERT}" ] && [ -n "${SIGNING_KEY}" ]; then
                      echo "🏭 Using production certificates"
                      mkdir -p certs
                      echo "${SIGNING_CERT}" | base64 -d > certs/cert.pem
                      echo "${SIGNING_KEY}" | base64 -d > certs/key.pem

                      dxt sign "$DXT_FILE" --cert certs/cert.pem --key certs/key.pem
                      rm -rf certs/
                  else
                      echo "🔧 Using self-signed certificate"
                      dxt sign "$DXT_FILE" --self-signed
                  fi

                  dxt clean "$DXT_FILE"

                  echo "dxt_file=$DXT_FILE" >> $GITHUB_OUTPUT

            # Step 9: Publish to npm
            - name: Publish to npm
              id: npm-publish
              env:
                  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
              run: |
                  # Check if this version is already published
                  NPM_VERSION=$(npm view lokalise-mcp version 2>/dev/null || echo "0.0.0")
                  CURRENT_VERSION=${{ steps.get-version.outputs.version }}

                  if [ "$NPM_VERSION" = "$CURRENT_VERSION" ]; then
                      echo "Version $CURRENT_VERSION is already published to npm"
                      echo "published=false" >> $GITHUB_OUTPUT
                  else
                      echo "Publishing version $CURRENT_VERSION to npm"
                      echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
                      npm publish
                      echo "published=true" >> $GITHUB_OUTPUT
                  fi

            # Step 10: Create GitHub Release
            - name: Create GitHub Release
              uses: softprops/action-gh-release@v2
              with:
                  tag_name: v${{ steps.get-version.outputs.version }}
                  name: v${{ steps.get-version.outputs.version }}
                  draft: false
                  prerelease: false
                  generate_release_notes: true
                  files: |
                      release/lokalise-mcp-${{ steps.get-version.outputs.version }}.dxt
                      release/checksums.sha256
                      release/lokalise-mcp-${{ steps.get-version.outputs.version }}.tgz
                  body: |
                      ## 🎉 Lokalise MCP Server v${{ steps.get-version.outputs.version }}

                      ### 📦 Installation

                      #### 1) Smithery (Recommended)
                      Automated install and configuration for popular MCP clients.

                      ```bash
                      # Claude Desktop
                      npx -y @smithery/cli install @AbdallahAHO/lokalise-mcp --client claude

                      # Cursor
                      npx -y @smithery/cli install @AbdallahAHO/lokalise-mcp --client cursor

                      # VS Code (Claude Code)
                      npx -y @smithery/cli install @AbdallahAHO/lokalise-mcp --client vscode

                      # Claude Code
                      claude mcp add --transport http abdallah-aho-lokalise-mcp "https://server.smithery.ai/@AbdallahAHO/lokalise-mcp/mcp"

                      # Gemini CLI
                      npx -y @smithery/cli install @AbdallahAHO/lokalise-mcp --client gemini
                      ```

                      Inspect tools before installing:

                      ```bash
                      npx -y @smithery/cli@latest inspect @AbdallahAHO/lokalise-mcp
                      ```

                      #### 2) Claude Desktop Extension (DXT)
                      Download and double-click `lokalise-mcp-${{ steps.get-version.outputs.version }}.dxt` to install in ClaudeDesktop.
                      When prompted, enter your `LOKALISE_API_KEY`. Updates by installing the newer `.dxt`.

                      #### 3) Local (clone + run)
                      ```bash
                      git clone https://github.com/AbdallahAHO/lokalise-mcp.git
                      cd lokalise-mcp
                      npm install

                      export LOKALISE_API_KEY="your-api-key-here"
                      npm run mcp:http   # HTTP (SSE) at http://localhost:3000/mcp
                      # or
                      npm run mcp:stdio  # STDIO
                      ```

                      ### 🔐 Verify Downloads
                      ```bash
                      sha256sum -c checksums.sha256
                      ```

                      ### 📋 What's Changed
                      See the full changelog below for all changes in this release.

            # Step 11: Back-merge to develop
            - name: Back-merge to develop
              env:
                  GH_TOKEN: ${{ secrets.GH_PAT || secrets.GITHUB_TOKEN }}
              run: |
                  # Fetch latest branches
                  git fetch origin develop:refs/remotes/origin/develop
                  git fetch origin main:refs/remotes/origin/main

                  # Checkout develop
                  git checkout -B develop origin/develop

                  # Try to merge main with strategy to automatically resolve conflicts
                  # Using -X theirs to always take changes from main when conflicts occur
                  echo "🔄 Attempting to merge main into develop..."
                  
                  if git merge origin/main -X theirs -m "chore: back-merge main to develop after v${{ steps.get-version.outputs.version }} release" --no-edit; then
                      echo "✅ Merge successful (conflicts auto-resolved using main's version)"
                      # Push to develop
                      git push origin develop
                      echo "✅ Successfully pushed merged changes to develop"
                  else
                      # This should rarely happen with -X theirs, but handle it just in case
                      echo "⚠️ Unexpected merge failure even with auto-resolution. Attempting force resolution..."
                      
                      # Reset to develop and try a different approach
                      git reset --hard origin/develop
                      
                      # Create a temporary branch from main
                      git checkout -B temp-main origin/main
                      
                      # Merge develop into this branch (reverse merge) and take all from main
                      git merge origin/develop --strategy=ours -m "chore: back-merge main to develop after v${{ steps.get-version.outputs.version }} release (force resolved)"
                      
                      # Now force push this as the new develop
                      git branch -f develop HEAD
                      git checkout develop
                      
                      # Push the resolved develop branch
                      git push origin develop --force-with-lease
                      
                      echo "✅ Force-resolved conflicts by taking all changes from main"
                  fi

            # Step 12: Summary
            - name: Release Summary
              run: |
                  echo "## 🚀 Release Summary" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "- **Version**: ${{ steps.get-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
                  echo "- **npm Published**: ${{ steps.npm-publish.outputs.published }}" >> $GITHUB_STEP_SUMMARY
                  echo "- **GitHub Release**: ✅" >> $GITHUB_STEP_SUMMARY
                  echo "- **Back-merge Status**: Check workflow logs" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "### 📋 Release Assets" >> $GITHUB_STEP_SUMMARY
                  echo '```' >> $GITHUB_STEP_SUMMARY
                  ls -la release/ >> $GITHUB_STEP_SUMMARY
                  echo '```' >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "[View Release](https://github.com/${{ github.repository }}/releases/tag/v${{ steps.get-version.outputs.version }})" >> $GITHUB_STEP_SUMMARY