name: CI - Semantic Release

# This workflow is triggered on every push to the main branch
# It publishes to npm and creates GitHub releases with DXT artifacts
on:
    push:
        branches: [main]

jobs:
    release:
        name: Semantic Release
        runs-on: ubuntu-latest
        permissions:
            contents: write
            issues: write
            pull-requests: write
        
        steps:
            # Step 1: Check out the full Git history
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0
                  token: ${{ secrets.GITHUB_TOKEN }}

            # Step 2: Setup Node.js environment
            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: 22
                  cache: 'npm'

            # Step 3: Install dependencies
            - name: Install dependencies
              run: |
                  npm ci
                  npm install -g @anthropic-ai/dxt

            # Step 4: Build the package
            - name: Build
              run: |
                  npm run build
                  chmod +x dist/index.js

            # Step 5: Run tests
            - name: Run tests
              run: npm test

            # Step 6: Configure Git identity
            - name: Configure Git User
              run: |
                  git config --global user.email "github-actions[bot]@users.noreply.github.com"
                  git config --global user.name "github-actions[bot]"

            # Step 7: Get version from package.json
            - name: Get version
              id: get-version
              run: |
                  VERSION=$(node -p "require('./package.json').version")
                  echo "version=$VERSION" >> $GITHUB_OUTPUT
                  echo "Current version: $VERSION"

            # Step 8: Create and sign DXT package
            - name: Create DXT Package
              id: create-dxt
              run: |
                  # Prepare release directory
                  node scripts/prepare-release.js ${{ steps.get-version.outputs.version }}
                  
                  # Sign DXT package
                  DXT_FILE="release/lokalise-mcp-${{ steps.get-version.outputs.version }}.dxt"
                  
                  if [ -n "${{ secrets.SIGNING_CERT }}" ] && [ -n "${{ secrets.SIGNING_KEY }}" ]; then
                      echo "🏭 Using production certificates"
                      mkdir -p certs
                      echo "${{ secrets.SIGNING_CERT }}" | base64 -d > certs/cert.pem
                      echo "${{ secrets.SIGNING_KEY }}" | base64 -d > certs/key.pem
                      
                      dxt sign "$DXT_FILE" --cert certs/cert.pem --key certs/key.pem
                      rm -rf certs/
                  else
                      echo "🔧 Using self-signed certificate"
                      dxt sign "$DXT_FILE" --self-signed
                  fi
                  
                  # Verify signature
                  dxt verify "$DXT_FILE"
                  
                  echo "dxt_file=$DXT_FILE" >> $GITHUB_OUTPUT

            # Step 9: Publish to npm
            - name: Publish to npm
              id: npm-publish
              env:
                  NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
              run: |
                  # Check if this version is already published
                  NPM_VERSION=$(npm view lokalise-mcp version 2>/dev/null || echo "0.0.0")
                  CURRENT_VERSION=${{ steps.get-version.outputs.version }}
                  
                  if [ "$NPM_VERSION" = "$CURRENT_VERSION" ]; then
                      echo "Version $CURRENT_VERSION is already published to npm"
                      echo "published=false" >> $GITHUB_OUTPUT
                  else
                      echo "Publishing version $CURRENT_VERSION to npm"
                      echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
                      npm publish
                      echo "published=true" >> $GITHUB_OUTPUT
                  fi

            # Step 10: Create GitHub Release
            - name: Create GitHub Release
              uses: softprops/action-gh-release@v2
              with:
                  tag_name: v${{ steps.get-version.outputs.version }}
                  name: v${{ steps.get-version.outputs.version }}
                  draft: false
                  prerelease: false
                  generate_release_notes: true
                  files: |
                      release/lokalise-mcp-${{ steps.get-version.outputs.version }}.dxt
                      release/checksums.sha256
                      release/lokalise-mcp-${{ steps.get-version.outputs.version }}.tgz
                  body: |
                      ## 🎉 Lokalise MCP Server v${{ steps.get-version.outputs.version }}

                      ### 📦 Installation

                      #### Desktop Extension (Recommended)
                      Download and double-click `lokalise-mcp-${{ steps.get-version.outputs.version }}.dxt` to install in Claude Desktop.

                      #### npm Package
                      ```bash
                      npm install -g lokalise-mcp@${{ steps.get-version.outputs.version }}
                      ```

                      ### 🔐 Verify Downloads
                      ```bash
                      sha256sum -c checksums.sha256
                      ```

                      ### 📋 What's Changed
                      See the full changelog below for all changes in this release.

            # Step 11: Back-merge to develop
            - name: Back-merge to develop
              run: |
                  # Fetch latest develop
                  git fetch origin develop:develop
                  
                  # Checkout develop
                  git checkout develop
                  
                  # Merge main
                  git merge main -m "chore: back-merge main to develop after v${{ steps.get-version.outputs.version }} release"
                  
                  # Push to develop
                  git push origin develop

            # Step 12: Summary
            - name: Release Summary
              run: |
                  echo "## 🚀 Release Summary" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "- **Version**: ${{ steps.get-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
                  echo "- **npm Published**: ${{ steps.npm-publish.outputs.published }}" >> $GITHUB_STEP_SUMMARY
                  echo "- **GitHub Release**: ✅" >> $GITHUB_STEP_SUMMARY
                  echo "- **Back-merged to develop**: ✅" >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "### 📋 Release Assets" >> $GITHUB_STEP_SUMMARY
                  echo '```' >> $GITHUB_STEP_SUMMARY
                  ls -la release/ >> $GITHUB_STEP_SUMMARY
                  echo '```' >> $GITHUB_STEP_SUMMARY
                  echo "" >> $GITHUB_STEP_SUMMARY
                  echo "[View Release](https://github.com/${{ github.repository }}/releases/tag/v${{ steps.get-version.outputs.version }})" >> $GITHUB_STEP_SUMMARY